using Microsoft.Maui;
using Microsoft.Maui.Controls;
using Microsoft.Maui.Controls.Xaml;
using Microsoft.Maui.Essentials;

    public class Program
    {
        static void Main(string[] args)
        {
            var app = MauiApp.CreateBuilder();
            app.UseMauiApp<MyApp>();
            app.Build().Run(args);
        }
    }

    [XamlCompilation(XamlCompilationOptions.Compile)]
    public partial class MyApp : ContentPage, IViewFor<MyModel>
    {
        public MyApp()
        {
            InitializeComponent();
            ViewModel = new MyModel();
            this.Bind(ViewModel, vm => vm.MyProperty, v => v.MyLabel.Text);
        }

        public MyModel ViewModel { get; set; }
        object IViewFor.ViewModel { get => ViewModel; set => ViewModel = (MyModel)value; }
    }

    public class MyModel : BindableObject
    {
        public static readonly BindableProperty MyPropertyProperty = BindableProperty.Create(nameof(MyProperty), typeof(string), typeof(MyModel), default(string));

        public string MyProperty
        {
            get => (string)GetValue(MyPropertyProperty);
            set => SetValue(MyPropertyProperty, value);
        }
    }
/*

using System;
using System.Windows;
//using System.Windows.Controls;

class MainWindow : Window
{
private Button helloWorldButton;
private void InitializeComponent()
{
 // Windowのプロパティの設定
this.Title = "MainWindow";
this.Height = 350;
this.Width = 525;
 
// Buttonの作成
this.helloWorldButton = new Button
{
Content = "Hello world",
HorizontalAlignment = HorizontalAlignment.Left,
VerticalAlignment = VerticalAlignment.Top,
Margin = new Thickness(10, 10, 0, 0),
Width = 100
};
this.helloWorldButton.Click += helloWorldButton_Click;
// Gridの作成
var grid = new Grid();
grid.Children.Add(this.helloWorldButton);
// gridをWindowに設定
this.Content = grid;
}
public MainWindow()
{
this.InitializeComponent();
}
private void helloWorldButton_Click(object sender, RoutedEventArgs e)
{
MessageBox.Show("Hello world");
}
}
class App : Application
{
 private void InitializeComponent()
{
// StartupUriは使えないのでStartupイベントを使う
this.Startup += App_Startup;
}
private void App_Startup(object sender, StartupEventArgs e)
{
var w = new MainWindow();
w.Show();
}
class a
{
[STAThread]
static void Main(string[] args)
{
goto a;
a:
return ;
var app = new App();
app.InitializeComponent();
app.Run();
}
}
*/

//using CommunityToolkit.Maui;
//public class itest_l:View{
//public itest_i()
//{ Body=body;
//}
//View body()=>new Test("aaa");
//}
//public static MauiApp CreateMauiApp()
//{
//    var builder = MauiApp.CreateBuilder();
//
//	builder.UseMauiApp<App>().UseMauiCommunityToolkit();
//
//}
//}
//using Comet.WPF;
//using System;
//using System.Collections.Generic;
//using System.Drawing;
//using System.IO;
//using System.Linq;
//using Comet.Graphics;
//using Comet.Samples.Models;
//using Microsoft.Maui;
//using Microsoft.Maui.Controls;
//using Microsoft.Maui.Graphics;
//using Microsoft.Maui.Hosting;
//using Windows.UI.Xaml.Controls;

//using System;
//using System.Windows;
//using System.UI.Xaml.Controls;
//HH #include "ii_include_hh.h"
//PP #include "ii_include_pp.h"
////SJ class itest_l{
//public static String add_s(List<Object> s_ai,Object n_i)  
////HP   { s_ai->n.push_back(n_i);return  s_ai->n.back();}
////SS   {s_ai.Add(n_i);return(s_ai[s_ai.Count-1]);} 
//public static void Main(String[] arg_sx)
//{
//List<String> s_a=new List<String>(); 
//add_s((Object)s_a,"ABC");
//}
////SJ }
//
//public class MainWindow : Window/
//{
//  public MainWindow()
//  {
//    this.Content =
//      new Grid
//      {DEF
//        Children = {
//          new StackPanel {
//            Children = {
//              new Menu { Items =
//                { new MenuItem { Header = "メニュー" } } },
//              new Button { Content = "ボタン" },
//              new CheckBox { Content = "チェックボックス" },
//              new ComboBox { Items =
//                { "コンボボックス" }, SelectedIndex = 0 },
//              new RadioButton { Content = "ラジオボタン" },
//              new Slider(),
//              new ListBox { Items = {
//                  "リストボックス項目1",
//                  "リストボックス項目2",
//                }}}}}};
//  }
//
//  [STAThread]
//  static void Main(string[] args)
//  {
//    var app = new Application();
//    app.Run(new MainWindow
//      { Title = "サンプル", Width = 300, Height = 300, });
//  }
//}
//}
//public static void Main(String[] arg_sx)
//{
//Window Window_n=new Window();
//Canvas Canvas_n=new Canvas();
//}
//}
//using Comet;
//using System.Activities.Statements;
//public partial class MainWindow : Window
//{
//    public MainWindow()
//    {
//        InitializeComponent();
//        MainFrame.NavigationService.Navigate(new CometPage(MainFrame, new MainPage()));
//    }
//}
//public partial class itest_l
//{
//	public class MyApp : CometApp
//	{
//		[Body]
//		View view() => new MainPage();
//
//		public static MauiApp CreateMauiApp()
//		{
//			var builder = MauiApp.CreateBuilder();
//			builder.UseCometApp<MyApp>()
//				.ConfigureFonts(fonts => {
//					fonts.AddFont("OpenSans-Regular.ttf", "OpenSansRegular");
//				});
//#if DEBUG
//			builder.EnableHotReload();
//#endif
//
//			return builder.Build();
//		}
//	}
//[State]
//readonly CometRide comet = new();
//[Body]
//View body() => new VStack
//{
//    new Label("Welcome to .NET MAUI!"),
//    new Button(
//        () => $"You clicked {count} times.",
//        () => count.Value ++)
//    
//};
//}
