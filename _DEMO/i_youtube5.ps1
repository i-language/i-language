add-type -AssemblyName System.Windows.Forms
$sp=new-object -com SAPI.spVoice
function f_sleep([int]$s){Start-Sleep -s $s}
function f_speak([string[]]$s){$sss="";foreach($ss in $s){$sss=$sss+$ss}$dummy=$sp.Speak($sss)}
function f_keys([string[]]$s){foreach($ss in $s){[System.Windows.Forms.SendKeys]::SendWait("$ss");}}
if($ENV:COMPUTERNAME -eq "KAZUAKI-PC"){$SYS="I"}else{$SYS="I37ORG"}
$i=$args[0];$REALTEST="REAL";$JOB="";
if($I -eq "0"){$JOB="010400"}
Start-Process -FilePath C:\I\BINI37\IMENUWD.EXE  -ArgumentList  JA,30/600,I_${ENV:COMPUTERNAME}_$SYS.I,ZZZZ$JOB,$REALTEST
f_sleep 3
if($I -eq "0"){
f_speak "プログラミング言語の音声を使って手抜きで作っています、お聞きぐるしい点はご容赦下さい。"`
,"これからインストールで作られているプログラムを使ってプログラミングのノウハウを説明します。”`
,"ヘルプ検索のプログラムで説明します。”`
,"ヘルプ検索はメニューじょうで88でもF1でもその時に表示されているメニュー画面のヘルプを表示しますが、”`
,"普通にメニューから立ち上げる事も出来、この時は表示するメニューを選択する必要が有るので表示はしません。尚、I言語ではメニューとプログラムをジョブとも言います。"`
,"更に、呼び出しにあるジョブを０で選択して、次の画面で別のジョブのHELPを表示したり、操作で文字を検索できる等、結構複雑なプログラムと成っています。"
f_keys "21","ZZZZZZZZ","1ZZZZZZZZZZZZZZZ","ZZZZ010101","{ENTER}","{LEFT}","0"
f_sleep 3
f_speak "ヘルプ検索のプログラムです。"
f_speak "100のREPAT0イコール10でPROGRAM以降が10回繰り返され例ます、つまり、これで、0による呼び出しで別のHELPの画面が10回表示出来ます。"
f_speak "100のREPAT0で最後に0が付いているのは、COPY=@ZZZZZZ_SQL内でREPEATを使っている為です。"
f_speak "200のPROGRAMイコールでヘルプテーブルを検索するようにしています。"
f_speak "200のPROGRAMの２番目の&X1はその右のテーブルの別メイで&X1とする事を推奨しています。"
f_speak "200のくえっしょんマークで囲まれている物はデータメイでプログラムの読み出し時に内容で置き換えられます。"
f_speak "200のアンダーバーエムエムのようにデータメイの先頭がアンダーバーのものはシステムが提供している物で,"`
,"アンダーバーエムエムはマスターテーブルの先頭に書きRDBMSの違いやテストちゅうやメニューに指定の許可や許可区分の違いを同じ文字で表現でき変化に強いように成っています。"
f_speak "300のLEFTイコールでメニューテーブルも結合しておりメニューからの情報も得られます。"
f_speak "300の右端のアスタリスクはインデクス番号での結合条件を設定しない意味に書き、結合条件はJOIN_オンで陽に設定します。"
f_speak "400から600までのJOIN_オンで結合の条件を指定しています。"
f_speak "400のくえっしょんマークアンダーバーTくえっしょんマークはPROGRAMイコールの右で指定した、別メイのX1です。"
f_speak "500から600までの_CLと_Cと_CRは列を結合する場合に使用し、Mariaでぃびーが関数を使う関係でこのようにしています。"
f_speak "600のX2.くえっしょんマークアンダーバーNEアンドドットSYSTEM_ラングくえっしょんマークのようにアンダーとアンドで"`
,"囲まれた時のNはNAMEの名前の意味で、Eがイコールの意味で、名前同士の一致比較でX2ドットSYSTEM_ラングイコールX1ドットSYSTEM_ラングと成ります。"
f_speak "700のCONTROL=HIGHは、通常は縦幅を画面に表示できる幅だけ増やしますが、ヘルプ画面が邪魔をしないように縦25行の固定の縦幅となります。"`
,"初期のプログラムはMS-DOSのCUI画面で作っていたので縦幅の基本は25文字分と成っています。”
f_speak "800の先頭のダラー1プラスは繰り返しの中ですのでREPEAT0の１回目の繰り返しのみこの行が採用される意味です。"
f_speak "800のシャープZZZZZZ_ARG_BEGINはプログラムの起動時パラメータで指定したものをプログラムが受け取れます。"
f_speak "900の先頭のダラー1マイナスは繰り返しの１回目は採用しない意味と成ります、２回目以降は即検索表示するようにCONTROLイコールBEGIN_ENTERを指定します。"
f_speak "1000の先頭のダラー10マイナスは繰り返しの１0回目以外採用で、0の選択機能がCONTROLイコール0で付加されます。"
f_speak "1100のCOLORは以降の操作命令を背景の色表示の必要な時に実行されます。"
f_speak "1200のIFは判定処理でfindが0より大きい多時はJUMP命令でCOLOR_Bにジャンプします。"
f_speak "1300のSETは右辺を左辺に転送します。SYSTEM_SEQ@COLORにWを転送する事でSYSTEM_SEQの背景しょくをWHITEの白にしています。"
f_speak "1300の右辺のように文字を指定したい場合がシングルコーテーションで囲みます。尚シングルコーテーションを文字として使いたい時は２個連続で書きます。"
f_speak "1300のEXIT{};はCOLORのセクションを終了します。"
f_speak "1400のCOLOR_B:の最後にコロンの有る文字はJUMPやBACKと飛び先と成ります。"
f_speak "1400のSETでSYSTEM_SEQ@COLORにBを転送する事でSYSTEM_SEQの背景しょくをBLUEの青ににしています。"
f_speak "1500のBIGINは以降の操作命令をプログラムの起動時に実行されます。"
f_speak "1600のWN.XWHEREのようにWで始まるデータめいはDATA等で宣言しなくても使える名前に使用します。尚、2番目のNは全角文字を含む全ての文字用で、数字の場合は数値のみで小数点以下の桁数の意味と成ります。"
f_speak "1600のように右辺を省略すると空白が転送されます。"
f_speak "1810のようにSETではカンマで区切りで複数個を書く事が出来ます。"
f_speak "1900のダラーSYSTEM_CALのように先頭にダラー記号を付けると前のPROGRAMイコールからのデータと成ります。"
f_keys "{DOWN}","{LEFT}","{UP}","{UP}","{UP}","{UP}"
f_speak "2700の右辺の?WN.XKEY?はプログラムの読み出し時に内容で置き換わるので、2200のSYSTEM_JOBの先頭がドットのデータ名の内容が左辺に転送されます。"
f_speak "2900のアンドドットで始まるデータ名はPROGRAMイコールで宣言したテーブル情報です。"
f_speak "3000のSET内のプラス記号は文字を結合します。"
f_speak "3300のSETイコールで文字が入力出来ます。"
f_speak "3400のTITLEイコールでS_CMDのタイトル名を操作にします。"
f_speak "3500のMESAGEイコールで操作入力時に画面の２ぎょう目このメッセージを表示します。"
f_speak "3600以降は操作の入力後に実行されます。"
f_speak "3600の_DATA@COUNTの_DATAは現在処理中の.S_CMDの意味で＠COUNTはその文字数を意味します。"
f_speak "3800のSPLIT_CHAR命令で.S_CMDの内容を空白単位区切りでWNドットの後に１からの連番が付いた名前に転送されます。"
f_speak "4000のIFのようにカンマで区切て複数の条件をおあ条件で判定出来ます。"
f_speak "4000のIFのカンマ区切の条件では左辺を省略すると一つの左辺と同じに成ります。"
f_speak "プログラムはまだ先がありますが、今まで説明したように一つ一つは初心者でも何となくわかると思います、分からない点は文法書で確認すれば何とか分かるはずですので、解読してみてください。"
f_speak "インストールされているプログラムは結構色々な処理を行っているので、システム作りの参考になります。"
}
# read-host "pause"